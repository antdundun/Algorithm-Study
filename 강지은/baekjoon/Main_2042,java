import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main_2042 {
	
	static long[] tree;
	static int treeSize;
	static int N, M, K;
	static long[] arr;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		StringBuilder sb = new StringBuilder();
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		arr = new long[N];
		for (int i = 0; i < N; i++) {
			arr[i] = Long.parseLong(br.readLine());
		}
		
		int h = (int)Math.ceil(Math.log(N)/Math.log(2));
		treeSize = (int)Math.pow(2, h+1);
		tree = new long[treeSize];
		
		init(arr, 1, 0, N-1);
		
		for (int i = 0; i < M+K; i++) {
			st = new StringTokenizer(br.readLine());
			long a = Long.parseLong(st.nextToken());
			long b = Long.parseLong(st.nextToken());
			long c = Long.parseLong(st.nextToken());
			
			if (a==1) {
				long diff = c-arr[(int)(b-1)];
				arr[(int)(b-1)] = c;
				update(1, 0, N-1, b-1, diff);
			} else {
				long ans = sum(1, 0, N-1, b-1, c-1);
				sb.append(ans+"\n");
			}
			
		}
		
		System.out.println(sb.toString());

	}

	private static long init(long[] arr, int node, int start, int end) {		
		if (start == end) {
			return tree[node] = arr[start];
		} else {
			return tree[node] = init(arr, node*2, start, (start+end)/2)
					+ init(arr, node*2+1, (start+end)/2+1, end);
		}
		
	}

	private static void update(int node, int start, int end, long idx, long diff) {
		if (idx < start || end < idx) return;
		
		tree[node] += diff;
		
		if (start != end) {
			update(node*2, start, (start+end)/2, idx, diff);
			update(node*2+1, (start+end)/2+1, end, idx, diff);
		}
		
	}

	private static long sum(int node, int start, int end, long left, long right) {
		if (left > end || right < start) return 0;
		
		if (left <= start && end <= right) {
			return tree[node];
		} else {
			return sum(node*2, start, (start+end)/2, left, right)
					+ sum(node*2+1, (start+end)/2+1, end, left, right);
		}
	}

}
