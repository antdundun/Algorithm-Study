import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

// 1167. 트리의 지름 / 골드2 / 1시간 5분
// 시간 초과: 모든 정점에서 dfs를 호출해 최대길이를 갱신하려해서 그런 것 같다 -> O(|V|^2)
// 트리의 특성 이용: 모든 노드들은 필연적으로 다른 정점으로 가는 경로가 유일하다, 이는 트리가 사이클 없이 연결되어 있기 때문
// 따라서 모든 정점은 어떤 경로들을 포함할 수 밖에 없다.
// 즉 임의의 정점에서 dfs를 한 다음 가장 먼 정점에서 dfs를 또 수행하면 모든 정점으로의 최대 길이를 구할 수 있음
public class Main {
	static List<List<int[]>> list = new ArrayList<>();
	static boolean[] visited;
	static int[] dist;
	static int maxLen = Integer.MIN_VALUE;
	static int end;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int v = Integer.parseInt(br.readLine());
		for (int i = 0; i <= v; i++) {
			list.add(new ArrayList<>());
		}
		visited = new boolean[v + 1];
		for (int i = 1; i <= v; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			while (true) {
				int e = Integer.parseInt(st.nextToken());
				if (e == -1) {
					break;
				}
				int cost = Integer.parseInt(st.nextToken());
				list.get(a).add(new int[] { e, cost });
			}
		}
		Arrays.fill(visited, false);
		dfs(1, 0);
		
		Arrays.fill(visited, false);
		dfs(end, 0);
		
		System.out.println(maxLen);
	}

	public static void dfs(int x, int total) {
		if (total > maxLen) {
			maxLen = total;
			end = x;
		}
		visited[x] = true;

		for (int i = 0; i < list.get(x).size(); i++) {
			int next = list.get(x).get(i)[0];
			int nextCost = list.get(x).get(i)[1];
			if (visited[next]) {
				continue;
			}
			dfs(next, total + nextCost);
			visited[next] = true;
		}
	}

}
